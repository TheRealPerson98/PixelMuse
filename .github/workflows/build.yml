name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # This is crucial for creating releases and uploading assets

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Build Windows app
        run: npx electron-builder --win --${{ matrix.arch }} --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List dist directory contents
        run: dir dist

      # Rename latest.yml file for ARM64 to avoid naming conflicts
      - name: Rename latest.yml for ARM64
        if: matrix.arch == 'arm64'
        run: |
          if (Test-Path dist\latest.yml) {
            Copy-Item -Path dist\latest.yml -Destination dist\latest-win-arm64.yml
          }

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: |
            dist/*-${{ matrix.arch }}.exe
            dist/latest*.yml
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Build Linux app
        run: npx electron-builder --linux --${{ matrix.arch }} --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List dist directory contents
        run: ls -la dist/

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: |
            dist/*.AppImage
            dist/latest*.yml
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Build macOS app
        run: npx electron-builder --mac --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List dist directory contents
        run: ls -la dist/

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: |
            dist/*-*.dmg
            dist/latest*.yml
          if-no-files-found: error

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      # Rename any duplicate files to ensure unique names in release
      - name: Ensure unique filenames
        run: |
          # Create directory for release assets
          mkdir -p release-assets
          
          # Find and copy all files with unique names
          find artifacts -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.yml" | while read file; do
            filename=$(basename "$file")
            platform=$(echo "$file" | grep -oP 'artifacts/\K[^/]+')
            
            # If it's latest.yml from windows-x64, keep the original name
            if [[ "$file" == *"windows-x64"*"/latest.yml" ]]; then
              cp "$file" "release-assets/latest.yml"
            # For all other latest.yml files, add platform prefix if not already there
            elif [[ "$filename" == "latest.yml" ]]; then
              cp "$file" "release-assets/latest-$platform.yml"
            # Copy all other files as is
            else
              cp "$file" "release-assets/$filename"
            fi
          done

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: PixelMuse ${{ steps.get_version.outputs.VERSION }}
          files: release-assets/*
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 